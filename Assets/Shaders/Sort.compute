#ifndef SORT_COMPUTE
#define SORT_COMPUTE

#include "SPHLib.compute"
//  y   z
//  |  /
//  | /
//  |/____x  [x][y][z]

int XYZtoNindex(float3 index, float3 size)
{
    if(index.x >= size.x || index.y >= size.y || index.z >= size.z)
    {
        return -1;
    }
    int x = index.x;
    int y = index.y;
    int z = index.z;
    return z * size.x * size.y + y * size.x + x;
}

float3 NtoXYZindex(int n, float3 size){
    if(n >= size.x * size.y * size.z)
    {
        return float3(-1, -1, -1);
    }
    int z =  n / size.x / size.y;
    n -= z * size.x * size.y;
    int y = n / size.x;
    int x = n % size.x;
    return float3(x, y, z);
}

void AssignCell(inout Particle particle)
{
    // float3 index = float3(
    //     floor(particle.position.x / m_size.x * m_cellCount.x),
    //     floor(particle.position.y / m_size.y * m_cellCount.y),
    //     floor(particle.position.z / m_size.z * m_cellCount.z)
    // );
    // particle.cellId = XYZtoNindex(index, m_cellCount);
}


bool IsAdjacentCell(int index, int other)
{
    float3 indexCoord = NtoXYZindex(index, m_cellCount);
    float3 otherCoord = NtoXYZindex(other, m_cellCount);
    return 
        abs(indexCoord.x - otherCoord.x) <= 1 
        || abs(indexCoord.y - otherCoord.y) <= 1 
        || abs(indexCoord.z - otherCoord.z) <= 1;
}

#endif